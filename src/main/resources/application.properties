spring.application.name=currency-conversion
server.port=8100
spring.cloud.config.enabled=false
spring.datasource.url=jdbc:postgresql://localhost:5432/currencyconversion
spring.datasource.username=postgres
spring.datasource.password=mysecretpassword
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto = update
eureka.client.serviceUrl.defaultZone= http://localhost:8761/eureka


























#@GetMapping("/currency-conversion/from/{from}/to/{to}/quantity/{quantity}")
#public ResponseEntity<CurrencyConversion> convert(@PathVariable String from, @PathVariable String to, @PathVariable BigDecimal quantity)
#{
#HashMap<String, String > uriVariables= new HashMap<>();
#uriVariables.put("from", from);
#uriVariables.put("to", to);
#ResponseEntity<CurrencyConversion> responseentity = new RestTemplate().getForEntity("http://localhost:8000/currency-exchange/from/{from}/to/{to}", CurrencyConversion.class, uriVariables);
#CurrencyConversion currencyconvo = responseentity.getBody();
#
#assert currencyconvo != null;
#BigDecimal conversionMultiple = currencyconvo.getConversionMultiple();
#BigDecimal quantityBigDecimal = quantity;
#BigDecimal result = conversionMultiple.multiply(quantityBigDecimal);
#
#String status= "SUCCESS";
#if(currencyconvo==null)
#{
#status= "FAILED";
#
#//            resfeign= new CurrencyConversion(from, to, null, quantity, null, null, status);
#return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
#}
#res= new CurrencyConversion( currencyconvo.getId(), from, to, conversionMultiple ,quantity,  result , currencyconvo.getEnvironment(), status);
#r1.save(res);
#return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
#}